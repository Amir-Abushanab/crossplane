---
# This allows Crossplane to manage our new composite resource.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clusters.gke.example.org
  labels:
    rbac.crossplane.io/aggregate-to-crossplane: "true"
rules:
- apiGroups:
  - gke.example.org
  resources:
  - clusters
  - clusters/status
  verbs:
  - "*"
---
# This defines a GKE cluster with two identical node pools.
apiVersion: apiextensions.crossplane.io/v1alpha1
kind: InfrastructureDefinition
metadata:
  name: clusters.gke.example.org
spec:
  # The set of connection secret keys that this composite resource exposes. Each
  # key must be provided by the connectionDetails of a composed resource.
  connectionSecretKeys:
  - kubeconfig
  # The schema of this composite resource, in the form of a partial template for
  # a Kubernetes CustomResourceDefinition.
  crdSpecTemplate:
    group: gke.example.org
    version: v1alpha1
    names:
      kind: Cluster
      listKind: ClusterList
      plural: clusters
      singular: cluster
    validation:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              region:
                type: string
                description: Geographic region in which nodes will exist.
              zones:
                type: array
                description: Geographic zones in which nodes will exist.
                items:
                  type: string
              cidrs:
                type: object
                description: CIDRs for nodes, pods, and services.
                properties:
                  master:
                    type: string
                    description: CIDR for master node(s).
                  nodes:
                    type: string
                    description: CIDR for nodes.
                  pods:
                    type: string
                    description: CIDR for pods.
                  services:
                    type: string
                    description: CIDR for services.
                required:
                - nodes
                - pods
                - services
              servicedNetworkSelector:
                type: object
                description: Selects a ServicedNetwork for this Cluster.
                properties:
                  matchLabels:
                    type: object
                    additionalProperties:
                      type: string
                required:
                - matchLabels
              providerRef:
                type: object
                description: Crossplane GCP provider credentials to use.
                properties:
                  name:
                    type: string
                required:
                - name
            required:
            - region
            - zones
            - cidrs
            - servicedNetworkSelector
            - providerRef
---
apiVersion: apiextensions.crossplane.io/v1alpha1
kind: Composition
metadata:
  name: clusters.gke.example.org
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  reclaimPolicy: Delete
  from:
    apiVersion: gke.example.org/v1alpha1
    kind: Cluster
  to:
  - base:
      apiVersion: compute.gcp.crossplane.io/v1beta1
      kind: Subnetwork
      spec:
        forProvider:
          privateIpGoogleAccess: true
          secondaryIpRanges:
            - rangeName: pods
            - rangeName: services
        reclaimPolicy: Delete
    patches:
      # Copy any labels from our Cluster to the Subnetwork that it composes.
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
      # Set the external name annotation of the composed Subnetwork to that of
      # the Cluster composite, if one exists.
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
      # Use the providerRef of the Cluster.
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
    - fromFieldPath: "spec.region"
      toFieldPath: "spec.forProvider.region"
    - fromFieldPath: "spec.cidrs.nodes"
      toFieldPath: "spec.forProvider.ipCidrRange"
    - fromFieldPath: "spec.cidrs.pods"
      toFieldPath: "spec.forProvider.secondaryIpRanges[0].ipCidrRange"
    - fromFieldPath: "spec.cidrs.services"
      toFieldPath: "spec.forProvider.secondaryIpRanges[1].ipCidrRange"
      # Use the networkGroupSelector of the Cluster to select a resource group
      # in which to create the Subnetwork.
    - fromFieldPath: "spec.servicedNetworkSelector"
      toFieldPath: "spec.forProvider.networkSelector"
  - base:
      apiVersion: container.gcp.crossplane.io/v1beta1
      kind: GKECluster
      spec:
        forProvider:
          masterAuth:
            username: admin
          ipAllocationPolicy:
            useIpAliases: true
            clusterSecondaryRangeName: pods
            servicesSecondaryRangeName: services
          subnetworkSelector:
            matchControllerRef: true
        writeConnectionSecretToRef:
          namespace: crossplane-system
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
    - fromFieldPath: "spec.region"
      toFieldPath: "spec.forProvider.location"
    - fromFieldPath: "spec.servicedNetworkSelector"
      toFieldPath: "spec.forProvider.networkSelector"
    - fromFieldPath: "spec.cidrs.master"
      toFieldPath: "spec.forProvider.privateClusterConfig.masterIpv4CidrBlock"
      # Store the connection secret for this GKECluster in a secret name derived
      # from the Cluster's UID. Use the string format transform function to
      # append -controlplane to the UID.
    - fromFieldPath: "metadata.uid"
      toFieldPath: "spec.writeConnectionSecretToRef.name"
      transforms:
      - type: string
        string:
          fmt: "%s-controlplane"
    connectionDetails:
    - fromConnectionSecretKey: kubeconfig
  - base:
      apiVersion: container.gcp.crossplane.io/v1alpha1
      kind: NodePool
      spec:
        forProvider:
          initialNodeCount: 1
          clusterSelector:
            matchControllerRef: true
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
    - fromFieldPath: "spec.zones"
      toFieldPath: "spec.forProvider.locations"
  - base:
      apiVersion: container.gcp.crossplane.io/v1alpha1
      kind: NodePool
      spec:
        forProvider:
          initialNodeCount: 1
          clusterSelector:
            matchControllerRef: true
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
    - fromFieldPath: "spec.zones"
      toFieldPath: "spec.forProvider.locations"